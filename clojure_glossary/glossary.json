{"bigdec": "Coerce to BigDecimal", "+": "Returns the sum of nums. (+) returns 0. Does not auto-promote\nlongs, will throw on overflow. See also: +'", "-": "If no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Does not auto-promote\nlongs, will throw on overflow. See also: -'", "*": "Returns the product of nums. (*) returns 1. Does not auto-promote\nlongs, will throw on overflow. See also: *'", "/": "If no denominators are supplied, returns 1/numerator,\nelse returns numerator divided by all of the denominators.", "quot": "quot[ient] of dividing numerator by denominator.", "rem": "remainder of dividing numerator by denominator.", "mod": "Modulus of num and div. Truncates toward negative infinity.", "inc": "Returns a number one greater than num. Does not auto-promote\nlongs, will throw on overflow. See also: inc'", "dec": "Returns a number one less than num. Does not auto-promote\nlongs, will throw on overflow. See also: dec'", "max": "Returns the greatest of the nums.", "min": "Returns the least of the nums.", "with-precision": "Sets the precision and rounding mode to be used for BigDecimal operations.\n Usage: (with-precision 10 (/ 1M 3))\nor:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\nHALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.", "numerator": "Returns the numerator part of a Ratio.", "denominator": "Returns the denominator part of a Ratio.", "rand": "Returns a random floating point number between 0 (inclusive) and\nn (default 1) (exclusive).", "rand-int": "Returns a random integer between 0 (inclusive) and n (exclusive).", "=": "Equality. Returns true if x equals y, false if not. Same as\nJava x.equals(y) except it also works for nil, and compares\nnumbers and collections in a type-independent manner.  Clojure's immutable data\nstructures define equals() (and thus =) as a value, not an identity,\ncomparison.", "==": "Returns non-nil if nums all have the equivalent\nvalue (type-independent), otherwise false", "not=": "Same as (not (= obj1 obj2))", "<": "Returns non-nil if nums are in monotonically increasing order,\notherwise false.", ">": "Returns non-nil if nums are in monotonically decreasing order,\notherwise false.", "<=": "Returns non-nil if nums are in monotonically non-decreasing order,\notherwise false.", ">=": "Returns non-nil if nums are in monotonically non-increasing order,\notherwise false.", "bit-and": "Bitwise and", "bit-or": "Bitwise or", "bit-xor": "Bitwise exclusive or", "bit-flip": "Flip bit at index n", "bit-not": "Bitwise complement", "bit-and-not": "Bitwise and with complement", "bit-clear": "Clear bit at index n", "bit-set": "Set bit at index n", "bit-shift-left": "Bitwise shift left", "bit-shift-right": "Bitwise shift right", "bit-test": "Test bit at index n", "byte": "Coerce to byte", "short": "Coerce to short", "int": "Coerce to int", "long": "Coerce to long", "float": "Coerce to float", "double": "Coerce to double", "bigint": "Coerce to BigInt", "bigdec": "Coerce to BigDecimal", "num": "Coerce to Number", "rationalize": "returns the rational value of num", "identical?": "Tests if 2 arguments are the same object", "zero?": "Returns true if num is zero, else false", "pos?": "Returns true if num is greater than zero, else false", "neg?": "Returns true if num is less than zero, else false", "even?": "Returns true if n is even, throws an exception if n is not an integer", "odd?": "Returns true if n is odd, throws an exception if n is not an integer", "number?": "Returns true if x is a Number", "ratio?": "Returns true if n is a Ratio", "rational?": "Returns true if n is a rational number", "integer?": "Returns true if n is an integer", "int?": "Return true if x is a fixed precision integer", "pos-int?": "Return true if x is a positive fixed precision integer", "nat-int?": "Return true if x is a non-negative fixed precision integer", "decimal?": "Returns true if n is a BigDecimal", "float?": "Returns true if n is a floating point number", "double?": "Return true if x is a Double", "nil?": "Returns true if x is nil, false otherwise.", "true?": "Returns true if x is the value true, false otherwise.", "false?": "Returns true if x is the value false, false otherwise.", "boolean": "Coerce to boolean", "keyword": "Returns a Keyword with the given namespace and name.  Do not use :\nin the keyword strings, it will be added automatically.", "symbol": "Returns a Symbol with the given namespace and name.", "name": "Returns the name String of a string, symbol or keyword.", "intern": "Finds or creates a var named by the symbol name in the namespace\nns (which can be a symbol or a namespace), setting its root binding\nto val if supplied. The namespace must exist. The var will adopt any\nmetadata from the name symbol.  Returns the var.", "namespace": "Returns the namespace String of a symbol or keyword, or nil if not present.", "keyword?": "Return true if x is a Keyword", "symbol?": "Return true if x is a Symbol", "ident?": "Return true if x is a symbol or keyword", "simple-keyword?": "Return true if x is a keyword without a namespace", "simple-symbol?": "Return true if x is a symbol without a namespace", "simple-ident?": "Return true if x is a symbol or keyword without a namespace", "qualified-keyword?": "Return true if x is a keyword with a namespace", "qualified-symbol?": "Return true if x is a symbol with a namespace", "qualified-ident?": "Return true if x is a symbol or keyword with a namespace", "str": "With no args, returns the empty string. With one arg x, returns\nx.toString().  (str nil) returns the empty string. With more than\none arg, returns the concatenation of the str values of the args.", "print-str": "print to a string, returning it", "println-str": "println to a string, returning it", "pr-str": "pr to a string, returning it", "prn-str": "prn to a string, returning it", "with-out-str": "Evaluates exprs in a context in which *out* is bound to a fresh\nStringWriter.  Returns the string created by any nested printing\ncalls.", "count": "Returns the number of items in the collection. (count nil) returns\n0.  Also works on strings, arrays, and Java Collections and Maps", "get": "Returns the value mapped to key, not-found or nil if key not present.", "subs": "Returns the substring of s beginning at start inclusive, and ending\nat end (defaults to length of string), exclusive.", "format": "Formats a string using java.lang.String.format, see java.util.Formatter for format\nstring syntax", "char": "Coerce to char", "char?": "Return true if x is a Character", "string?": "Return true if x is a String", "re-pattern": "Returns an instance of java.util.regex.Pattern, for use, e.g. in\nre-matcher.", "re-matcher": "Returns an instance of java.util.regex.Matcher, for use, e.g. in\nre-find.", "re-find": "Returns the next regex match, if any, of string to pattern, using\njava.util.regex.Matcher.find().  Uses re-groups to return the\ngroups.", "re-matches": "Returns the match, if any, of string to pattern, using\njava.util.regex.Matcher.matches().  Uses re-groups to return the\ngroups.", "re-seq": "Returns a lazy sequence of successive matches of pattern in string,\nusing java.util.regex.Matcher.find(), each such match processed with\nre-groups.", "re-groups": "Returns the groups from the most recent match/find. If there are no\nnested groups, returns a string of the entire match. If there are\nnested groups, returns a vector of the groups, the first element\nbeing the entire match.", "not": "Returns true if x is logical false, false otherwise.", "and": "Evaluates exprs one at a time, from left to right. If a form\nreturns logical false (nil or false), and returns that value and\ndoesn't evaluate any of the other expressions, otherwise it returns\nthe value of the last expr. (and) returns true.", "or": "Evaluates exprs one at a time, from left to right. If a form\nreturns a logical true value, or returns that value and doesn't\nevaluate any of the other expressions, otherwise it returns the\nvalue of the last expression. (or) returns nil.", "let": "binding => binding-form init-expr\n Evaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein.", "if": "Evaluates test.", "if-not": "Evaluates test. If logical false, evaluates and returns then expr, \notherwise else expr, if supplied, else nil.", "if-let": "bindings => binding-form test\n If test is true, evaluates then with binding-form bound to the value of \ntest, if not, yields else", "if-some": "bindings => binding-form test\n  If test is not nil, evaluates then with binding-form bound to the\n value of test, if not, yields else", "when": "Evaluates test. If logical true, evaluates body in an implicit do.", "when-not": "Evaluates test. If logical false, evaluates body in an implicit do.", "when-let": "bindings => binding-form test\n When test is true, evaluates body with binding-form bound to the value of test", "when-first": "bindings => x xs\n Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", "when-some": "bindings => binding-form test\n  When test is not nil, evaluates body with binding-form bound to the\n value of test", "cond": "Takes a set of test/expr pairs. It evaluates each test one at a\ntime.  If a test returns logical true, cond evaluates and returns\nthe value of the corresponding expr and doesn't evaluate any of the\nother tests or exprs. (cond) returns nil.", "condp": "Takes a binary predicate, an expression, and a set of clauses.\nEach clause can take the form of either:\n test-expr result-expr\n test-expr :>> result-fn\n Note :>> is an ordinary keyword.\n For each clause, (pred test-expr expr) is evaluated. If it returns\nlogical true, the clause is a match. If a binary clause matches, the\nresult-expr is returned, if a ternary clause matches, its result-fn,\nwhich must be a unary function, is called with the result of the\npredicate as its argument, the result of that call being the return\nvalue of condp. A single default expression can follow the clauses,\nand its value will be returned if no clause matches. If no default\nexpression is provided and no clause matches, an\nIllegalArgumentException is thrown.", "cond->": "Takes an expression and a set of test/form pairs. Threads expr (via ->)\nthrough each form for which the corresponding test\nexpression is true. Note that, unlike cond branching, cond-> threading does\nnot short circuit after the first true test expression.", "cond->>": "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\nthrough each form for which the corresponding test expression\nis true.  Note that, unlike cond branching, cond->> threading does not short circuit\nafter the first true test expression.", "some->": "When expr is not nil, threads it into the first form (via ->),\nand when that result is not nil, through the next etc", "some->>": "When expr is not nil, threads it into the first form (via ->>),\nand when that result is not nil, through the next etc", "as->": "Binds name to expr, evaluates the first form in the lexical context\nof that binding, then binds name to that result, repeating for each\nsuccessive form, returning the result of the last form.", "case": "Takes an expression, and a set of clauses.\n Each clause can take the form of either:\n test-constant result-expr\n (test-constant1 ... test-constantN)  result-expr\n The test-constants are not evaluated. They must be compile-time\nliterals, and need not be quoted.  If the expression is equal to a\ntest-constant, the corresponding result-expr is returned. A single\ndefault expression can follow the clauses, and its value will be\nreturned if no clause matches. If no default expression is provided\nand no clause matches, an IllegalArgumentException is thrown.\n Unlike cond and condp, case does a constant-time dispatch, the\nclauses are not considered sequentially.  All manner of constant\nexpressions are acceptable in case, including numbers, strings,\nsymbols, keywords, and (Clojure) composites thereof. Note that since\nlists are used to group multiple constants that map to the same\nexpression, a vector can be used to match a list if needed. The\ntest-constants need not be all of the same type.", "do": "Evaluates the expressions in order and returns the value of the last. If no\nexpressions are supplied, returns nil. See http://clojure.org/special_forms\nfor more information.", "eval": "Evaluates the form data structure (not text!) and returns the result.", "loop": "Evaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein. Acts as a recur target.", "recur": "Evaluates the exprs in order, then, in parallel, rebinds the bindings of\nthe recursion point to the values of the exprs. See\nhttp://clojure.org/special_forms for more information.", "trampoline": "trampoline can be used to convert algorithms requiring mutual\nrecursion without stack consumption. Calls f with supplied args, if\nany. If f returns a fn, calls that fn with no arguments, and\ncontinues to repeat, until the return value is not a fn, then\nreturns that non-fn value. Note that if you want to return a fn as a\nfinal value, you must wrap it in some data structure and unpack it\nafter trampoline returns.", "while": "Repeatedly executes body while test expression is true. Presumes\nsome side-effect will cause test to become false/nil. Returns nil", "try": "The exprs are evaluated and, if no exceptions occur, the value of the last\nis returned. If an exception occurs and catch clauses are provided, each is\nexamined in turn and the first for which the thrown exception is an instance\nof the named class is considered a matching catch clause. If there is a\nmatching catch clause, its exprs are evaluated in a context in which name is\nbound to the thrown exception, and the value of the last is the return value\nof the function. If there is no matching catch clause, the exception\npropagates out of the function. Before returning, normally or abnormally,\nany finally exprs will be evaluated for their side effects. See\nhttp://clojure.org/special_forms for more information.", "catch": "The exprs are evaluated and, if no exceptions occur, the value of the last\nis returned. If an exception occurs and catch clauses are provided, each is\nexamined in turn and the first for which the thrown exception is an instance\nof the named class is considered a matching catch clause. If there is a\nmatching catch clause, its exprs are evaluated in a context in which name is\nbound to the thrown exception, and the value of the last is the return value\nof the function. If there is no matching catch clause, the exception\npropagates out of the function. Before returning, normally or abnormally,\nany finally exprs will be evaluated for their side effects. See\nhttp://clojure.org/special_forms for more information.", "finally": "The exprs are evaluated and, if no exceptions occur, the value of the last\nis returned. If an exception occurs and catch clauses are provided, each is\nexamined in turn and the first for which the thrown exception is an instance\nof the named class is considered a matching catch clause. If there is a\nmatching catch clause, its exprs are evaluated in a context in which name is\nbound to the thrown exception, and the value of the last is the return value\nof the function. If there is no matching catch clause, the exception\npropagates out of the function. Before returning, normally or abnormally,\nany finally exprs will be evaluated for their side effects. See\nhttp://clojure.org/special_forms for more information.", "throw": "The expr is evaluated and thrown, therefore it should yield an instance of\nsome derivee of Throwable. Please see http://clojure.org/special_forms#throw", "assert": "Evaluates expr and throws an exception if it does not evaluate to\nlogical true.", "delay": "Takes a body of expressions and yields a Delay object that will\ninvoke the body only the first time it is forced (with force or deref/@), and\nwill cache the result and return it on all subsequent force\ncalls. See also - realized?", "delay?": "returns true if x is a Delay created with delay", "deref": "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\nreturns the in-transaction-value of ref, else returns the\nmost-recently-committed value of ref. When applied to a var, agent\nor atom, returns its current state. When applied to a delay, forces\nit if not already forced. When applied to a future, will block if\ncomputation not complete. When applied to a promise, will block\nuntil a value is delivered.  The variant taking a timeout can be\nused for blocking references (futures and promises), and will return\ntimeout-val if the timeout (in milliseconds) is reached before a\nvalue is available. See also - realized?.", "force": "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", "repeatedly": "Takes a function of no args, presumably with side effects, and\nreturns an infinite (or length n if supplied) lazy sequence of calls\nto it", "iterate": "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", "dotimes": "bindings => name n\n Repeatedly executes body (presumably for side-effects) with name\nbound to integers from 0 through n-1.", "doseq": "Repeatedly executes body (presumably for side-effects) with\nbindings and filtering as provided by \"for\".  Does not retain\nthe head of the sequence. Returns nil.", "for": "List comprehension. Takes a vector of one or more\n binding-form/collection-expr pairs, each followed by zero or more\n modifiers, and yields a lazy sequence of evaluations of expr.\n Collections are iterated in a nested fashion, rightmost fastest,\n and nested coll-exprs can refer to bindings created in prior\n binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n :while test, :when test.\n (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))", "lazy-seq": "Takes a body of expressions that returns an ISeq or nil, and yields\na Seqable object that will invoke the body only the first time seq\nis called, and will cache the result and return it on all subsequent\nseq calls. See also - realized?", "lazy-cat": "Expands to code which yields a lazy sequence of the concatenation\nof the supplied colls.  Each coll expr is not evaluated until it is\nneeded. \n (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", "doall": "When lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. doall can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, retains the head and returns it, thus causing the entire\nseq to reside in memory at one time.", "dorun": "When lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. dorun can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, does not retain the head and returns nil.", "type": "Returns the :type metadata of x, or its Class if none", "extends?": "Returns true if atype extends protocol", "satisfies?": "Returns true if x satisfies the protocol", "class": "Returns the Class of x", "bases": "Returns the immediate superclass and direct interfaces of c, if any", "supers": "Returns the immediate and indirect superclasses and interfaces of c, if any", "class?": "Returns true if x is an instance of Class", "instance?": "Evaluates x and tests if it is an instance of the class\n  c. Returns true or false", "isa?": "Returns true if (= child parent), or child is directly or indirectly derived from\nparent, either via a Java type inheritance relationship or a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy", "cast": "Throws a ClassCastException if x is not a c, else returns x.", "get-validator": "Gets the validator-fn for a var/ref/agent/atom.", "set-validator!": "Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\nside-effect-free fn of one argument, which will be passed the intended\nnew state on any state change. If the new state is unacceptable, the\nvalidator-fn should return false or throw an exception. If the current state (root\nvalue if var) is not acceptable to the new validator, an exception\nwill be thrown and the validator will not be changed.", "atom": "Creates and returns an Atom with an initial value of x and zero or\nmore options (in any order):\n :meta metadata-map\n :validator validate-fn\n If metadata-map is supplied, it will become the metadata on the\natom. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.", "swap!": "Atomically swaps the value of atom to be:\n(apply f current-value-of-atom args). Note that f may be called\nmultiple times, and thus should be free of side effects.  Returns\nthe value that was swapped in.", "reset!": "Sets the value of atom to newval without regard for the\ncurrent value. Returns newval.", "compare-and-set!": "Atomically sets the value of atom to newval if and only if the\ncurrent value of the atom is identical to oldval. Returns true if\nset happened, else false", "ref": "Creates and returns a Ref with an initial value of x and zero or\nmore options (in any order):\n :meta metadata-map\n :validator validate-fn\n :min-history (default 0)\n:max-history (default 10)\n If metadata-map is supplied, it will become the metadata on the\nref. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception. validate-fn will be called on\ntransaction commit, when all refs have their final values.\n Normally refs accumulate history dynamically as needed to deal with\nread demands. If you know in advance you will need history you can\nset :min-history to ensure it will be available when first needed (instead\nof after a read fault). History is limited, and the limit can be set\nwith :max-history.", "sync": "transaction-flags => TBD, pass nil for now\n Runs the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of sync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.", "dosync": "Runs the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of dosync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.", "ref-set": "Must be called in a transaction. Sets the value of ref.\nReturns val.", "alter": "Must be called in a transaction. Sets the in-transaction-value of\nref to:\n (apply fun in-transaction-value-of-ref args)\n and returns the in-transaction-value of ref.", "commute": "Must be called in a transaction. Sets the in-transaction-value of\nref to:\n (apply fun in-transaction-value-of-ref args)\n and returns the in-transaction-value of ref.\n At the commit point of the transaction, sets the value of ref to be:\n (apply fun most-recently-committed-value-of-ref args)\n Thus fun should be commutative, or, failing that, you must accept\nlast-one-in-wins behavior.  commute allows for more concurrency than\nref-set.", "ensure": "Must be called in a transaction. Protects the ref from modification\nby other transactions.  Returns the in-transaction-value of\nref. Allows for more concurrency than (ref-set ref @ref)", "io!": "If an io! block occurs in a transaction, throws an\nIllegalStateException, else runs body in an implicit do. If the\nfirst expression in body is a literal string, will use that as the\nexception message.", "ref-history-count": "Returns the history count of a ref", "ref-max-history": "Gets the max-history of a ref, or sets it and returns the ref", "ref-min-history": "Gets the min-history of a ref, or sets it and returns the ref", "agent": "Creates and returns an agent with an initial value of state and\nzero or more options (in any order):\n :meta metadata-map\n :validator validate-fn\n :error-handler handler-fn\n :error-mode mode-keyword\n If metadata-map is supplied, it will become the metadata on the\nagent. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.  handler-fn is called if an\naction throws an exception or if validate-fn rejects a new state --\nsee set-error-handler! for details.  The mode-keyword may be either\n:continue (the default if an error-handler is given) or :fail (the\ndefault if no error-handler is given) -- see set-error-mode! for\ndetails.", "send": "Dispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread from a thread pool, the state of the agent\nwill be set to the value of:\n (apply action-fn state-of-agent args)", "send-off": "Dispatch a potentially blocking action to an agent. Returns the\nagent immediately. Subsequently, in a separate thread, the state of\nthe agent will be set to the value of:\n (apply action-fn state-of-agent args)", "await": "Blocks the current thread (indefinitely!) until all actions\ndispatched thus far, from this thread or agent, to the agent(s) have\noccurred.  Will block on failed agents.  Will never return if\na failed agent is restarted with :clear-actions true or shutdown-agents was called.", "await-for": "Blocks the current thread until all actions dispatched thus\nfar (from this thread or agent) to the agents have occurred, or the\ntimeout (in milliseconds) has elapsed. Returns logical false if\nreturning due to timeout, logical true otherwise.", "agent-error": "Returns the exception thrown during an asynchronous action of the\nagent if the agent is failed.  Returns nil if the agent is not\nfailed.", "restart-agent": "When an agent is failed, changes the agent state to new-state and\nthen un-fails the agent so that sends are allowed again.  If\na :clear-actions true option is given, any actions queued on the\nagent that were being held while it was failed will be discarded,\notherwise those held actions will proceed.  The new-state must pass\nthe validator if any, or restart will throw an exception and the\nagent will remain failed with its old state and error.  Watchers, if\nany, will NOT be notified of the new state.  Throws an exception if\nthe agent is not failed.", "shutdown-agents": "Initiates a shutdown of the thread pools that back the agent\nsystem. Running actions will complete, but no new actions will be\naccepted", "*agent*": "The agent currently running an action on this thread, else nil", "agent-errors": "DEPRECATED: Use 'agent-error' instead.\nReturns a sequence of the exceptions thrown during asynchronous\nactions of the agent.", "error-handler": "Returns the error-handler of agent a, or nil if there is none.\nSee set-error-handler!", "set-error-handler!": "Sets the error-handler of agent a to handler-fn.  If an action\nbeing run by the agent throws an exception or doesn't pass the\nvalidator fn, handler-fn will be called with two arguments: the\nagent and the exception.", "error-mode": "Returns the error-mode of agent a.  See set-error-mode!", "set-error-mode!": "Sets the error-mode of agent a to mode-keyword, which must be\neither :fail or :continue.  If an action being run by the agent\nthrows an exception or doesn't pass the validator fn, an\nerror-handler may be called (see set-error-handler!), after which,\nif the mode is :continue, the agent will continue as if neither the\naction that caused the error nor the error itself ever happened.\n\nIf the mode is :fail, the agent will become failed and will stop\naccepting new 'send' and 'send-off' actions, and any previously\nqueued actions will be held until a 'restart-agent'.  Deref will\nstill work, returning the state of the agent before the error.", "release-pending-sends": "Normally, actions sent directly or indirectly during another action\nare held until the action completes (changes the agent's\nstate). This function can be used to dispatch any pending sent\nactions immediately. This has no impact on actions sent during a\ntransaction, which are still held until commit. If no action is\noccurring, does nothing. Returns the number of actions dispatched.", "future": "Takes a body of expressions and yields a future object that will\ninvoke the body in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant of\nderef with timeout is used. See also - realized?.", "future-call": "Takes a function of no args and yields a future object that will\ninvoke the function in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant\nof deref with timeout is used. See also - realized?.", "future-done?": "Returns true if future f is done", "future-cancel": "Cancels the future, if possible.", "future-cancelled?": "Returns true if future f is cancelled", "future?": "Returns true if x is a future", "volatile!": "Creates and returns a Volatile with an initial value of val.", "vswap!": "Non-atomically swaps the value of the volatile as if:\n (apply f current-value-of-vol args). Returns the value that\n was swapped in.", "vreset!": "Sets the value of volatile to newval without regard for the\n current value. Returns newval.", "bound-fn": "Returns a function defined by the given fntail, which will install the\nsame bindings in effect as in the thread at the time bound-fn was called.\nThis may be used to define a helper function which runs on a different\nthread, but needs the same bindings in place.", "bound-fn*": "Returns a function, which will install the same bindings in effect as in\nthe thread at the time bound-fn* was called and then call f with any given\narguments. This may be used to define a helper function which runs on a\ndifferent thread, but needs the same bindings in place.", "get-thread-bindings": "Get a map with the Var/value pairs which is currently in effect for the\ncurrent thread.", "push-thread-bindings": "WARNING: This is a low-level function. Prefer high-level macros like\nbinding where ever possible.\n Takes a map of Var/value pairs. Binds each Var to the associated value for\nthe current thread. Each call *MUST* be accompanied by a matching call to\npop-thread-bindings wrapped in a try-finally!\n\n    (push-thread-bindings bindings)\n    (try\n      ...\n      (finally\n        (pop-thread-bindings)))", "pop-thread-bindings": "Pop one set of bindings pushed with push-binding before. It is an error to\npop bindings without pushing before.", "thread-bound?": "Returns true if all of the vars provided as arguments have thread-local bindings.\n Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.", "locking": "Executes exprs in an implicit do, while holding the monitor of x.\nWill release the monitor of x in all circumstances.", "pcalls": "Executes the no-arg fns in parallel, returning a lazy sequence of\ntheir values", "pvalues": "Returns a lazy sequence of the values of the exprs, which are\nevaluated in parallel", "pmap": "Like map, except f is applied in parallel. Semi-lazy in that the\nparallel computation stays ahead of the consumption, but doesn't\nrealize the entire result unless required. Only useful for\ncomputationally intensive functions where the time of f dominates\nthe coordination overhead.", "seque": "Creates a queued seq on another (presumably lazy) seq s. The queued\nseq will produce a concrete seq in the background, and can get up to\nn items ahead of the consumer. n-or-q can be an integer n buffer\nsize, or an instance of java.util.concurrent BlockingQueue. Note\nthat reading from a seque can block if the reader gets ahead of the\nproducer.", "promise": "Returns a promise object that can be read with deref/@, and set,\nonce only, with deliver. Calls to deref/@ prior to delivery will\nblock, unless the variant of deref with timeout is used. All\nsubsequent derefs will return the same delivered value without\nblocking. See also - realized?.", "deliver": "Delivers the supplied value to the promise, releasing any pending\nderefs. A subsequent call to deliver on a promise will have no effect.", "add-watch": "Adds a watch function to an agent/atom/var/ref reference. The watch\nfn must be a fn of 4 args: a key, the reference, its old-state, its\nnew-state. Whenever the reference's state might have been changed,\nany registered watches will have their functions called. The watch fn\nwill be called synchronously, on the agent's thread if an agent,\nbefore any pending sends if agent or ref. Note that an atom's or\nref's state may have changed again prior to the fn call, so use\nold/new-state rather than derefing the reference. Note also that watch\nfns may be called from multiple threads simultaneously. Var watchers\nare triggered only by root binding changes, not thread-local\nset!s. Keys must be unique per reference, and can be used to remove\nthe watch with remove-watch, but are otherwise considered opaque by\nthe watch mechanism.", "remove-watch": "Removes a watch (set by add-watch) from a reference", "fn": "params => positional-params* , or positional-params* & next-param\npositional-param => binding-form\nnext-param => binding-form\nname => symbol\n Defines a function", "defn": "Same as (def name (fn [params* ] exprs*)) or (def\n  name (fn ([params* ] exprs*)+)) with any doc-string or attrs added\n  to the var metadata. prepost-map defines a map with optional keys\n  :pre and :post that contain collections of pre or post conditions.", "defn-": "same as defn, yielding non-public def", "definline": "Experimental - like defmacro, except defines a named function whose\nbody is the expansion, calls to which may be expanded inline as if\nit were a macro. Cannot be used with variadic (&) args.", "identity": "Returns its argument.", "constantly": "Returns a function that takes any number of arguments and returns x.", "memfn": "Expands into code that creates a fn that expects to be passed an\nobject and any args and calls the named instance method on the\nobject passing the args. Use when you want to treat a Java method as\na first-class fn. name may be type-hinted with the method receiver's\ntype in order to avoid reflective calls.", "comp": "Takes a set of functions and returns a fn that is the composition\nof those fns.  The returned fn takes a variable number of args,\napplies the rightmost of fns to the args, the next\nfn (right-to-left) to the result, etc.", "complement": "Takes a fn f and returns a fn that takes the same arguments as f,\nhas the same effects, if any, and returns the opposite truth value.", "comparator": "Returns an implementation of java.util.Comparator based upon pred.", "fnil": "Takes a function f, and returns a function that calls f, replacing\na nil first argument to f with the supplied value x. Higher arity\nversions can replace arguments in the second and third\npositions (y, z). Note that the function f can take any number of\narguments, not just the one(s) being nil-patched.", "partial": "Takes a function f and fewer than the normal arguments to f, and\nreturns a fn that takes a variable number of additional args. When\ncalled, the returned function calls f with args + additional args.", "juxt": "Takes a set of functions and returns a fn that is the juxtaposition\nof those fns.  The returned fn takes a variable number of args, and\nreturns a vector containing the result of applying each fn to the\nargs (left-to-right).\n((juxt a b c) x) => [(a x) (b x) (c x)]", "memoize": "Returns a memoized version of a referentially transparent function. The\nmemoized version of the function keeps a cache of the mapping from arguments\nto results and, when calls with the same arguments are repeated often, has\nhigher performance at the expense of higher memory use.", "some-fn": "Takes a set of predicates and returns a function f that returns the first logical true value\nreturned by one of its composing predicates against any of its arguments, else it returns\nlogical false. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical true result against the original predicates.", "every-pred": "Takes a set of predicates and returns a function f that returns true if all of its\ncomposing predicates return a logical true value against all of its arguments, else it returns\nfalse. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical false result against the original predicates.", "->": "Threads the expr through the forms. Inserts x as the\nsecond item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nsecond item in second form, etc.", "->>": "Threads the expr through the forms. Inserts x as the\nlast item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nlast item in second form, etc.", "apply": "Applies fn f to the argument list formed by prepending intervening arguments to args.", "fn?": "Returns true if x implements Fn, i.e. is an object created via fn.", "ifn?": "Returns true if x implements IFn. Note that many data structures\n(e.g. sets and maps) implement IFn", "compare": "Comparator. Returns a negative number, zero, or a positive number\nwhen x is logically 'less than', 'equal to', or 'greater than'\ny. Same as Java x.compareTo(y) except it also works for nil, and\ncompares numbers and collections in a type-independent manner. x\nmust implement Comparable", "hash": "Returns the hash code of its argument. Note this is the hash code\nconsistent with =, and thus is different than .hashCode for Integer,\nShort, Byte and Clojure collections.", "defmulti": "Creates a new multimethod with the associated dispatch function.\nThe docstring and attr-map are optional.\n Options are key-value pairs and may be one of:\n :default\n The default dispatch value, defaults to :default\n :hierarchy\n The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n Hierarchies are type-like relationships that do not depend upon type\ninheritance. By default Clojure's multimethods dispatch off of a\nglobal hierarchy map.  However, a hierarchy relationship can be\ncreated with the derive function used to augment the root ancestor\ncreated with make-hierarchy.\n Multimethods expect the value of the hierarchy option to be supplied as\na reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\nor the var special form).", "defmethod": "Creates and installs a new method of multimethod associated with dispatch-value. ", "get-method": "Given a multimethod and a dispatch value, returns the dispatch fn\nthat would apply to that value, or nil if none apply and no default", "methods": "Given a multimethod, returns a map of dispatch values -> dispatch fns", "prefer-method": "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \n when there is a conflict", "prefers": "Given a multimethod, returns a map of preferred value -> set of other values", "remove-method": "Removes the method of multimethod associated with dispatch-value.", "remove-all-methods": "Removes all of the methods of multimethod.", "defmacro": "Like defn, but the resulting function name is declared as a\nmacro and will be used as a macro by the compiler when it is\ncalled.", "macroexpand": "Repeatedly calls macroexpand-1 on form until it no longer\nrepresents a macro form, then returns it.  Note neither\nmacroexpand-1 nor macroexpand expand macros in subforms.", "macroexpand-1": "If form represents a macro form, returns its expansion,\nelse returns form.", "gensym": "Returns a new symbol with a unique name. If a prefix string is\nsupplied, the name is prefix# where # is some unique number. If\nprefix is not supplied, the prefix is 'G__'.", "doto": "Evaluates x then calls all of the methods and functions with the\nvalue of x supplied at the front of the given arguments.  The forms\nare evaluated in order.  Returns x.\n (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", "..": "form => fieldName-symbol or (instanceMethodName-symbol args*)\n Expands into a member access (.) of the first member on the first\nargument, followed by the next member on the result, etc. For\ninstance:\n (.. System (getProperties) (get \"os.name\"))\n expands to:\n (. (. System (getProperties)) (get \"os.name\"))\n but is easier to write, read, and understand.", "set!": "Assignment special form. When the first operand is a field member access\nform, the assignment is to the corresponding field. If it is an instance\nfield, the instance expr will be evaluated, then the expr. In all cases\nthe value of expr is returned. Note - you cannot assign to function params\nor local bindings. Only Java fields, Vars, Refs and Agents are mutable in\nClojure. See http://clojure.org/special_forms for more information.", "make-array": "Creates and returns an array of instances of the specified class of\nthe specified dimension(s).  Note that a class object is required.\nClass objects can be obtained by using their imported or\nfully-qualified name.  Class objects for the primitive types can be\nobtained using, e.g., Integer/TYPE.", "object-array": "Creates an array of objects", "boolean-array": "Creates an array of booleans", "byte-array": "Creates an array of bytes", "char-array": "Creates an array of chars", "short-array": "Creates an array of shorts", "int-array": "Creates an array of ints", "long-array": "Creates an array of longs", "float-array": "Creates an array of floats", "double-array": "Creates an array of doubles", "aclone": "Returns a clone of the Java array. Works on arrays of known\ntypes.", "to-array": "Returns an array of Objects containing the contents of coll, which\ncan be any Collection.  Maps to java.util.Collection.toArray().", "to-array-2d": "Returns a (potentially-ragged) 2-dimensional array of Objects\ncontaining the contents of coll, which can be any Collection of any\nCollection.", "into-array": "Returns an array with components set to the values in aseq. The array's\ncomponent type is type if provided, or the type of the first value in\naseq if present, or Object. All values in aseq must be compatible with\nthe component type. Class objects for the primitive types can be obtained\nusing, e.g., Integer/TYPE.", "aget": "Returns the value at the index/indices. Works on Java arrays of all\ntypes.", "aset": "Sets the value at the index/indices. Works on Java arrays of\nreference types. Returns val.", "aset-boolean": "Sets the value at the index/indices. Works on arrays of boolean. Returns val.", "aset-char": "Sets the value at the index/indices. Works on arrays of char. Returns val.", "aset-byte": "Sets the value at the index/indices. Works on arrays of byte. Returns val.", "aset-int": "Sets the value at the index/indices. Works on arrays of int. Returns val.", "aset-long": "Sets the value at the index/indices. Works on arrays of long. Returns val.", "aset-short": "Sets the value at the index/indices. Works on arrays of short. Returns val.", "aset-float": "Sets the value at the index/indices. Works on arrays of float. Returns val.", "aset-double": "Sets the value at the index/indices. Works on arrays of double. Returns val.", "alength": "Returns the length of the Java array. Works on arrays of all\ntypes.", "amap": "Maps an expression across an array a, using an index named idx, and\nreturn value named ret, initialized to a clone of a, then setting \neach element of ret to the evaluation of expr, returning the new \narray ret.", "areduce": "Reduces an expression across an array a, using an index named idx,\nand return value named ret, initialized to init, setting ret to the \nevaluation of expr at each step, returning ret.", "booleans": "Casts to boolean[]", "bytes": "Casts to bytes[]", "chars": "Casts to chars[]", "ints": "Casts to int[]", "shorts": "Casts to shorts[]", "longs": "Casts to long[]", "floats": "Casts to float[]", "doubles": "Casts to double[]", "proxy": "class-and-interfaces - a vector of class names\n args - a (possibly empty) vector of arguments to the superclass\nconstructor.\n f => (name [params*] body) or\n(name ([params*] body) ([params+] body) ...)\n Expands to code which creates a instance of a proxy class that\nimplements the named class/interface(s) by calling the supplied\nfns. A single class, if provided, must be first. If not provided it\ndefaults to Object.\n The interfaces names must be valid interface types. If a method fn\nis not provided for a class method, the superclass methd will be\ncalled. If a method fn is not provided for an interface method, an\nUnsupportedOperationException will be thrown should it be\ncalled. Method fns are closures and can capture the environment in\nwhich proxy is called. Each method fn takes an additional implicit\nfirst arg, which is bound to 'this. Note that while method fns can\nbe provided to override protected methods, they have no other access\nto protected members, nor to super, as these capabilities cannot be\nproxied.", "get-proxy-class": "Takes an optional single class followed by zero or more\ninterfaces. If not supplied class defaults to Object.  Creates an\nreturns an instance of a proxy class derived from the supplied\nclasses. The resulting value is cached and used for any subsequent\nrequests for the same class set. Returns a Class object.", "construct-proxy": "Takes a proxy class and any arguments for its superclass ctor and\ncreates and returns an instance of the proxy.", "init-proxy": "Takes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nsets the proxy's fn map.  Returns the proxy.", "proxy-mappings": "Takes a proxy instance and returns the proxy's fn map.", "proxy-super": "Use to call a superclass method in the body of a proxy method. \nNote, expansion captures 'this", "update-proxy": "Takes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nupdates (via assoc) the proxy's fn map. nil can be passed instead of\na fn, in which case the corresponding method will revert to the\ndefault behavior. Note that this function can be used to update the\nbehavior of an existing instance without changing its identity.\nReturns the proxy.", "empty": "Returns an empty collection of the same category as coll, or nil", "not-empty": "If coll is empty, returns nil, else coll", "into": "Returns a new coll consisting of to-coll with all of the items of\nfrom-coll conjoined. A transducer may be supplied.", "conj": "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", "contains?": "Returns true if key is present in the given collection, otherwise\nreturns false.  Note that for numerically indexed collections like\nvectors and Java arrays, this tests if the numeric key is within the\nrange of indexes. 'contains?' operates constant or logarithmic time;\nit will not perform a linear search for a value.  See also 'some'.", "distinct?": "Returns true if no two of the arguments are =", "empty?": "Returns true if coll has no items - same as (not (seq coll)).\nPlease use the idiom (seq x) rather than (not (empty? x))", "every?": "Returns true if (pred x) is logical true for every x in coll, else\nfalse.", "not-every?": "Returns false if (pred x) is logical true for every x in\ncoll, else true.", "some": "Returns the first logical true value of (pred x) for any x in coll,\nelse nil.  One common idiom is to use a set as pred, for example\nthis will return :fred if :fred is in the sequence, otherwise nil:\n(some #{:fred} coll)", "not-any?": "Returns false if (pred x) is logical true for any x in coll,\nelse true.", "sequential?": "Returns true if coll implements Sequential", "associative?": "Returns true if coll implements Associative", "sorted?": "Returns true if coll implements Sorted", "counted?": "Returns true if coll implements count in constant time", "reversible?": "Returns true if coll implements Reversible", "seqable?": "Return true if the seq function is supported for x", "coll?": "Returns true if x implements IPersistentCollection", "seq?": "Return true if x implements ISeq", "vector?": "Return true if x implements IPersistentVector", "list?": "Returns true if x implements IPersistentList", "map?": "Return true if x implements IPersistentMap", "set?": "Returns true if x implements IPersistentSet", "vec": "Creates a new vector containing the contents of coll. Java arrays\nwill be aliased and should not be modified.", "vector": "Creates a new vector containing the args.", "vector-of": "Creates a new vector of a single primitive type t, where t is one\nof :int :long :float :double :byte :short :char or :boolean. The\nresulting vector complies with the interface of vectors in general,\nbut stores the values unboxed internally.\n Optionally takes one or more elements to populate the vector.", "peek": "For a list or queue, same as first, for a vector, same as, but much\nmore efficient than, last. If the collection is empty, returns nil.", "pop": "For a list or queue, returns a new list/queue without the first\nitem, for a vector, returns a new vector without the last item. If\nthe collection is empty, throws an exception.  Note - not the same\nas next/butlast.", "assoc": "assoc[iate]. When applied to a map, returns a new map of the\n  same (hashed/sorted) type, that contains the mapping of key(s) to\n  val(s). When applied to a vector, returns a new vector that\n  contains val at index. Note - index must be <= (count vector).", "subvec": "Returns a persistent vector of the items in vector from\nstart (inclusive) to end (exclusive).  If end is not supplied,\ndefaults to (count vector). This operation is O(1) and very fast, as\nthe resulting vector shares structure with the original and no\ntrimming is done.", "rseq": "Returns, in constant time, a seq of the items in rev (which\ncan be a vector or sorted-map), in reverse order. If rev is empty returns nil", "list": "Creates a new list containing the items.", "list*": "Creates a new seq containing the items prepended to the rest, the\nlast of which will be treated as a sequence.", "cons": "Returns a new seq where x is the first element and seq is\n  the rest.", "first": "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", "rest": "Returns a possibly empty seq of the items after the first. Calls seq on its\nargument.", "hash-map": "keyval => key val\nReturns a new hash map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.", "array-map": "Constructs an array-map. If any keys are equal, they are handled as\nif by repeated uses of assoc.", "zipmap": "Returns a map with the keys mapped to the corresponding vals.", "sorted-map": "keyval => key val\nReturns a new sorted map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.", "sorted-map-by": "keyval => key val\nReturns a new sorted map with supplied mappings, using the supplied\ncomparator.  If any keys are equal, they are handled as if by\nrepeated uses of assoc.", "bean": "Takes a Java object and returns a read-only implementation of the\nmap abstraction based upon its JavaBean properties.", "frequencies": "Returns a map from distinct items in coll to the number of times\nthey appear.", "assoc-in": "Associates a value in a nested associative structure, where ks is a\nsequence of keys and v is the new value and returns a new nested structure.\nIf any levels do not exist, hash-maps will be created.", "dissoc": "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\nthat does not contain a mapping for key(s).", "find": "Returns the map entry for key, or nil if key not present.", "key": "Returns the key of the map entry.", "val": "Returns the value in the map entry.", "keys": "Returns a sequence of the map's keys, in the same order as (seq map).", "vals": "Returns a sequence of the map's values, in the same order as (seq map).", "get-in": "Returns the value in a nested associative structure,\nwhere ks is a sequence of keys. Returns nil if the key\nis not present, or the not-found value if supplied.", "update": "'Updates' a value in an associative structure, where k is a\nkey and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nstructure.  If the key does not exist, nil is passed as the old value.", "update-in": "'Updates' a value in a nested associative structure, where ks is a\nsequence of keys and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nnested structure.  If any levels do not exist, hash-maps will be\ncreated.", "select-keys": "Returns a map containing only those entries in map whose key is in keys", "merge": "Returns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping from\nthe latter (left-to-right) will be the mapping in the result.", "merge-with": "Returns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping(s)\nfrom the latter (left-to-right) will be combined with the mapping in\nthe result by calling (f val-in-result val-in-latter).", "reduce-kv": "Reduces an associative collection. f should be a function of 3\narguments. Returns the result of applying f to init, the first key\nand the first value in coll, then applying f to that result and the\n2nd key and value, etc. If coll contains no entries, returns init\nand f is not called. Note that reduce-kv is supported on vectors,\nwhere the keys will be the ordinals.", "subseq": "sc must be a sorted collection, test(s) one of <, <=, > or\n>=. Returns a seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true", "rsubseq": "sc must be a sorted collection, test(s) one of <, <=, > or\n>=. Returns a reverse seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true", "hash-set": "Returns a new hash set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.", "set": "Returns a set of the distinct elements of coll.", "sorted-set": "Returns a new sorted set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.", "sorted-set-by": "Returns a new sorted set with supplied keys, using the supplied\ncomparator.  Any equal keys are handled as if by repeated uses of\nconj.", "disj": "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\ndoes not contain key(s).", "defstruct": "Same as (def name (create-struct keys...))", "create-struct": "Returns a structure basis object.", "struct": "Returns a new structmap instance with the keys of the\nstructure-basis. vals must be supplied for basis keys in order -\nwhere values are not supplied they will default to nil.", "struct-map": "Returns a new structmap instance with the keys of the\nstructure-basis. keyvals may contain all, some or none of the basis\nkeys - where values are not supplied they will default to nil.\nkeyvals can also contain keys not in the basis.", "accessor": "Returns a fn that, given an instance of a structmap with the basis,\nreturns the value at the key.  The key must be in the basis. The\nreturned function should be (slightly) more efficient than using\nget, but such use of accessors should be limited to known\nperformance-critical areas.", "seq": "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings, native Java arrays (of reference types) and any objects\n  that implement Iterable. Note that seqs cache values, thus seq\n  should not be used on any Iterable whose iterator repeatedly\n  returns the same mutable object.", "sequence": "Coerces coll to a (possibly empty) sequence, if it is not already\none. Will not force a lazy seq. (sequence nil) yields (), When a\ntransducer is supplied, returns a lazy sequence of applications of\nthe transform to the items in coll(s), i.e. to the set of first\nitems of each coll, followed by the set of second\nitems in each coll, until any one of the colls is exhausted.  Any\nremaining items in other colls are ignored. The transform should accept\nnumber-of-colls arguments", "eduction": "Returns a reducible/iterable application of the transducers\nto the items in coll. Transducers are applied in order as if\ncombined with comp. Note that these applications will be\nperformed every time reduce/iterator is called.", "repeat": "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", "replicate": "DEPRECATED: Use 'repeat' instead.\n Returns a lazy seq of n xs.", "range": "Returns a lazy seq of nums from start (inclusive) to end\n(exclusive), by step, where start defaults to 0, step to 1, and end to\ninfinity. When step is equal to 0, returns an infinite sequence of\nstart. When start is equal to end, returns empty list.", "cycle": "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", "interleave": "Returns a lazy seq of the first item in each coll, then the second etc.", "interpose": "Returns a lazy seq of the elements of coll separated by sep.\nReturns a stateful transducer when no collection is provided.", "tree-seq": "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n branch? must be a fn of one arg that returns true if passed a node\n that can have children (but may not).  children must be a fn of one\n arg that returns a sequence of the children. Will only be called on\n nodes for which branch? returns true. Root is the root node of the\ntree.", "xml-seq": "A tree seq on the xml elements as per xml/parse", "enumeration-seq": "Returns a seq on a java.util.Enumeration", "iterator-seq": "Returns a seq on a java.util.Iterator. Note that most collections\nproviding iterators implement Iterable and thus support seq directly.\nSeqs cache values, thus iterator-seq should not be used on any\niterator that repeatedly returns the same mutable object.", "file-seq": "A tree seq on java.io.Files", "line-seq": "Returns the lines of text from rdr as a lazy sequence of strings.\nrdr must implement java.io.BufferedReader.", "resultset-seq": "Creates and returns a lazy sequence of structmaps corresponding to\nthe rows in the java.sql.ResultSet rs", "second": "Same as (first (next x))", "last": "Return the last item in coll, in linear time", "next": "Returns a seq of the items after the first. Calls seq on its\nargument.  If there are no more items, returns nil.", "ffirst": "Same as (first (first x))", "nfirst": "Same as (next (first x))", "fnext": "Same as (first (next x))", "nnext": "Same as (next (next x))", "nth": "Returns the value at the index. get returns nil if index out of\nbounds, nth throws an exception unless not-found is supplied.  nth\nalso works for strings, Java arrays, regex Matchers and Lists, and,\nin O(n) time, for sequences.", "nthnext": "Returns the nth next of coll, (seq coll) when n is 0.", "nthrest": "Returns the nth rest of coll, coll when n is 0.", "rand-nth": "Return a random element of the (sequential) collection. Will have\nthe same performance characteristics as nth for the given\ncollection.", "butlast": "Return a seq of all but the last item in coll, in linear time", "take": "Returns a lazy sequence of the first n items in coll, or all items if\nthere are fewer than n.  Returns a stateful transducer when\nno collection is provided.", "take-last": "Returns a seq of the last n items in coll.  Depending on the type\nof coll may be no better than linear time.  For vectors, see also subvec.", "take-nth": "Returns a lazy seq of every nth item in coll.  Returns a stateful\ntransducer when no collection is provided.", "take-while": "Returns a lazy sequence of successive items from coll while\n(pred item) returns logical true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.", "drop": "Returns a lazy sequence of all but the first n items in coll.\nReturns a stateful transducer when no collection is provided.", "drop-last": "Return a lazy sequence of all but the last n (default 1) items in coll", "drop-while": "Returns a lazy sequence of the items in coll starting from the\nfirst item for which (pred item) returns logical false.  Returns a\nstateful transducer when no collection is provided.", "concat": "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", "distinct": "Returns a lazy sequence of the elements of coll with duplicates removed.\nReturns a stateful transducer when no collection is provided.", "group-by": "Returns a map of the elements of coll keyed by the result of\nf on each element. The value at each key will be a vector of the\ncorresponding elements, in the order they appeared in coll.", "partition": "Returns a lazy sequence of lists of n items each, at offsets step\napart. If step is not supplied, defaults to n, i.e. the partitions\ndo not overlap. If a pad collection is supplied, use its elements as\nnecessary to complete last partition upto n items. In case there are\nnot enough padding elements, return a partition with less than n items.", "partition-all": "Returns a lazy sequence of lists like partition, but may include\npartitions with fewer than n items at the end.  Returns a stateful\ntransducer when no collection is provided.", "partition-by": "Applies f to each value in coll, splitting it each time f returns a\n new value.  Returns a lazy seq of partitions.  Returns a stateful\n transducer when no collection is provided.", "split-at": "Returns a vector of [(take n coll) (drop n coll)]", "split-with": "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", "filter": "Returns a lazy sequence of the items in coll for which\n(pred item) returns logical true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.", "filterv": "Returns a vector of the items in coll for which\n(pred item) returns logical true. pred must be free of side-effects.", "remove": "Returns a lazy sequence of the items in coll for which\n(pred item) returns logical false. pred must be free of side-effects.\nReturns a transducer when no collection is provided.", "replace": "Given a map of replacement pairs and a vector/collection, returns a\nvector/seq with any elements = a key in smap replaced with the\ncorresponding val in smap.  Returns a transducer when no collection\nis provided.", "shuffle": "Return a random permutation of coll", "random-sample": "Returns items from coll with random probability of prob (0.0 -\n1.0).  Returns a transducer when no collection is provided.", "flatten": "Takes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat sequence.\n(flatten nil) returns an empty sequence.", "sort": "Returns a sorted sequence of the items in coll. If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  Guaranteed to be stable: equal elements will\nnot be reordered.  If coll is a Java array, it will be modified.  To\navoid this, sort a copy of the array.", "sort-by": "Returns a sorted sequence of the items in coll, where the sort\norder is determined by comparing (keyfn item).  If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  Guaranteed to be stable: equal elements will\nnot be reordered.  If coll is a Java array, it will be modified.  To\navoid this, sort a copy of the array.", "reverse": "Returns a seq of the items in coll in reverse order. Not lazy.", "dedupe": "Returns a lazy sequence removing consecutive duplicates in coll.\nReturns a transducer when no collection is provided.", "map": "Returns a lazy sequence consisting of the result of applying f to\nthe set of first items of each coll, followed by applying f to the\nset of second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments. Returns a transducer when\nno collection is provided.", "mapv": "Returns a vector consisting of the result of applying f to the\nset of first items of each coll, followed by applying f to the set\nof second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments.", "map-indexed": "Returns a lazy sequence consisting of the result of applying f to 0\nand the first item of coll, followed by applying f to 1 and the second\nitem in coll, etc, until coll is exhausted. Thus function f should\naccept 2 arguments, index and item. Returns a stateful transducer when\nno collection is provided.", "keep": "Returns a lazy sequence of the non-nil results of (f item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a transducer when no collection is provided.", "keep-indexed": "Returns a lazy sequence of the non-nil results of (f index item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a stateful transducer when no collection is\nprovided.", "mapcat": "Returns the result of applying concat to the result of applying map\nto f and colls.  Thus function f should return a collection. Returns\na transducer when no collections are provided", "reduce": "f should be a function of 2 arguments. If val is not supplied,\nreturns the result of applying f to the first 2 items in coll, then\napplying f to that result and the 3rd item, etc. If coll contains no\nitems, f must accept no arguments as well, and reduce returns the\nresult of calling f with no arguments.  If coll has only 1 item, it\nis returned and f is not called.  If val is supplied, returns the\nresult of applying f to val and the first item in coll, then\napplying f to that result and the 2nd item, etc. If coll contains no\nitems, returns val and f is not called.", "reductions": "Returns a lazy seq of the intermediate values of the reduction (as\nper reduce) of coll by f, starting with init.", "transduce": "reduce with a transformation of f (xf). If init is not\nsupplied, (f) will be called to produce it. f should be a reducing\nstep function that accepts both 1 and 2 arguments, if it accepts\nonly 2 you can add the arity-1 with 'completing'. Returns the result\nof applying (the transformed) xf to init and the first item in coll,\nthen applying xf to that result and the 2nd item, etc. If coll\ncontains no items, returns init and f is not called. Note that\ncertain transforms may inject or skip items.", "max-key": "Returns the x for which (k x), a number, is greatest.\n If there are multiple such xs, the last one is returned.", "min-key": "Returns the x for which (k x), a number, is least.\n If there are multiple such xs, the last one is returned.", "transient": "Returns a new, transient version of the collection, in constant time.", "persistent!": "Returns a new, persistent version of the transient collection, in\nconstant time. The transient collection cannot be used after this\ncall, any such use will throw an exception.", "conj!": "Adds x to the transient collection, and return coll. The 'addition'\nmay happen at different 'places' depending on the concrete type.", "pop!": "Removes the last item from a transient vector. If\nthe collection is empty, throws an exception. Returns coll", "assoc!": "When applied to a transient map, adds mapping of key(s) to\nval(s). When applied to a transient vector, sets the val at index.\nNote - index must be <= (count vector). Returns coll.", "dissoc!": "Returns a transient map that doesn't contain a mapping for key(s).", "disj!": "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\ndoes not contain key(s).", "def": "Creates and interns or locates a global var with the name of symbol and a\nnamespace of the value of the current namespace (*ns*). See\nhttp://clojure.org/special_forms for more information.", "defonce": "defs name to have the root value of the expr iff the named var has no root value,\nelse expr is unevaluated", "declare": "defs the supplied var names with no bindings, useful for making forward declarations.", "alter-var-root": "Atomically alters the root binding of var v by applying f to its\ncurrent value plus any args", "binding": "binding => var-symbol init-expr\n Creates new bindings for the (already-existing) vars, with the\nsupplied initial values, executes the exprs in an implicit do, then\nre-establishes the bindings that existed before.  The new bindings\nare made in parallel (unlike let); all init-exprs are evaluated\nbefore the vars are bound to their new values.", "with-bindings": "Takes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then executes body. Pops the installed\nbindings after body was evaluated. Returns the value of body.", "with-bindings*": "Takes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then calls f with the supplied arguments.\nPops the installed bindings after f returned. Returns whatever f returns.", "with-local-vars": "varbinding=> symbol init-expr\n Executes the exprs in a context in which the symbols are bound to\nvars with per-thread bindings to the init-exprs.  The symbols refer\nto the var objects themselves, and must be accessed with var-get and\nvar-set", "letfn": "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n Takes a vector of function specs and a body, and generates a set of\nbindings of functions to their names. All of the names are available\nin all of the definitions of the functions, as well as the body.", "var": "The symbol must resolve to a var, and the Var object itself (not its value)\nis returned. The reader macro #'x expands to (var x). See\nhttp://clojure.org/special_forms for more information.", "find-var": "Returns the global var named by the namespace-qualified symbol, or\nnil if no var with that name.", "var-get": "Gets the value in the var object", "var?": "Returns true if v is of type clojure.lang.Var", "bound?": "Returns true if all of the vars provided as arguments have any bound value, root or thread-local.\n Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.", "resolve": "same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)", "ns-resolve": "Returns the var or Class to which a symbol will be resolved in the\nnamespace (unless found in the environment), else nil.  Note that\nif the symbol is fully qualified, the var/Class to which it resolves\nneed not be present in the namespace.", "special-symbol?": "Returns true if s names a special form", "ns": "Sets *ns* to the namespace named by name (unevaluated), creating it\nif needed.  references can be zero or more of: (:refer-clojure ...)\n(:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\nwith the syntax of refer-clojure/require/use/import/load/gen-class\nrespectively, except the arguments are unevaluated and need not be\nquoted. (:gen-class ...), when supplied, defaults to :name\ncorresponding to the ns name, :main true, :impl-ns same as ns, and\n:init-impl-ns true. All options of gen-class are\nsupported. The :gen-class directive is ignored when not\ncompiling. If :gen-class is not supplied, when compiled only an\nnsname__init.class will be generated. If :refer-clojure is not used, a\ndefault (refer 'clojure.core) is used.  Use of ns is preferred to\nindividual calls to in-ns/require/use/import:\n (ns foo.bar\n  (:refer-clojure :exclude [ancestors printf])\n  (:require (clojure.contrib sql combinatorics))\n  (:use (my.lib this that))\n  (:import (java.util Date Timer Random)\n           (java.sql Connection Statement)))", "create-ns": "Create a new namespace named by the symbol if one doesn't already\nexist, returns it or the already-existing namespace of the same\nname.", "remove-ns": "Removes the namespace named by the symbol. Use with caution.\nCannot be used to remove the clojure namespace.", "*ns*": "A clojure.lang.Namespace object representing the current namespace.", "ns-name": "Returns the name of the namespace, a symbol.", "all-ns": "Returns a sequence of all namespaces.", "the-ns": "If passed a namespace, returns it. Else, when passed a symbol,\nreturns the namespace named by it, throwing an exception if not\nfound.", "find-ns": "Returns the namespace named by the symbol or nil if it doesn't exist.", "ns-publics": "Returns a map of the public intern mappings for the namespace.", "ns-interns": "Returns a map of the intern mappings for the namespace.", "ns-refers": "Returns a map of the refer mappings for the namespace.", "ns-aliases": "Returns a map of the aliases for the namespace.", "ns-imports": "Returns a map of the import mappings for the namespace.", "ns-map": "Returns a map of all the mappings for the namespace.", "in-ns": "Sets *ns* to the namespace named by the symbol, creating it if needed.", "ns-unalias": "Removes the alias for the symbol from the namespace.", "ns-unmap": "Removes the mappings for the symbol from the namespace.", "alias": "Add an alias in the current namespace to another\nnamespace. Arguments are two symbols: the alias to be used, and\nthe symbolic name of the target namespace. Use :as in the ns macro in preference\nto calling this directly.", "namespace-munge": "Convert a Clojure namespace name to a legal Java package name.", "make-hierarchy": "Creates a hierarchy object for use with derive, isa? etc.", "derive": "Establishes a parent/child relationship between parent and\ntag. Parent must be a namespace-qualified symbol or keyword and\nchild can be either a namespace-qualified symbol or keyword or a\nclass. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.", "underive": "Removes a parent/child relationship between parent and\ntag. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.", "parents": "Returns the immediate parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy", "ancestors": "Returns the immediate and indirect parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy", "descendants": "Returns the immediate and indirect children of tag, through a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy. Note: does not work on Java type inheritance\nrelationships.", "defprotocol": "A protocol is a named set of named methods and their signatures:\n(defprotocol AProtocolName\n   ;optional doc string\n  \"A doc string for AProtocol abstraction\"\n ;method signatures\n  (bar [this a b] \"bar docs\")\n  (baz [this a] [this a b] [this a b c] \"baz docs\"))\n No implementations are provided. Docs can be specified for the\nprotocol overall and for each method. The above yields a set of\npolymorphic functions and a protocol object. All are\nnamespace-qualified by the ns enclosing the definition The resulting\nfunctions dispatch on the type of their first argument, which is\nrequired and corresponds to the implicit target object ('this' in \nJava parlance). defprotocol is dynamic, has no special compile-time \neffect, and defines no new types or classes. Implementations of \nthe protocol methods can be provided using extend.\n defprotocol will automatically generate a corresponding interface,\nwith the same name as the protocol, i.e. given a protocol:\nmy.ns/Protocol, an interface: my.ns.Protocol. The interface will\nhave methods corresponding to the protocol functions, and the\nprotocol will automatically work with instances of the interface.\n Note that you should not use this interface with deftype or\nreify, as they support the protocol directly:\n (defprotocol P \n  (foo [this]) \n  (bar-me [this] [this y]))\n (deftype Foo [a b c] \n P\n  (foo [this] a)\n  (bar-me [this] b)\n  (bar-me [this y] (+ c y)))\n\n(bar-me (Foo. 1 2 3) 42)\n=> 45\n (foo \n  (let [x 42]\n    (reify P \n      (foo [this] 17)\n      (bar-me [this] x)\n      (bar-me [this y] x))))\n=> 17", "defrecord": "(defrecord name [fields*]  options* specs*)\n Options are expressed as sequential keywords and arguments (in any order).\n Supported options:\n:load-ns - if true, importing the record class will cause the\n           namespace in which the record was defined to be loaded.\n           Defaults to false.\n Each spec consists of a protocol or interface name followed by zero\nor more method bodies:\n protocol-or-interface-or-Object\n(methodName [args*] body)*\n Dynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces.\n The class will have the (immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly.\n Method definitions take the form:\n (methodname [args*] body)\n The argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n Methods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n In the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n The class will have implementations of several (clojure.lang)\ninterfaces generated automatically: IObj (metadata support) and\nIPersistentMap, and all of their superinterfaces.\n In addition, defrecord will define type-and-value-based =,\nand will defined Java .hashCode and .equals consistent with the\ncontract for java.util.Map.\n When AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n Two constructors will be defined, one taking the designated fields\nfollowed by a metadata map (nil for none) and an extension field\nmap (nil for none), and one taking only the fields (using nil for\nmeta and extension fields). Note that the field names __meta,\n__extmap, __hash and __hasheq are currently reserved and should not\nbe used when defining your own records.\n Given (defrecord TypeName ...), two factory functions will be\ndefined: ->TypeName, taking positional parameters for the fields,\nand map->TypeName, taking a map of keywords to field values.", "deftype": "(deftype name [fields*]  options* specs*)\n Options are expressed as sequential keywords and arguments (in any order).\n Supported options:\n:load-ns - if true, importing the type class will cause the\n           namespace in which the type was defined to be loaded.\n           Defaults to false.\n Each spec consists of a protocol or interface name followed by zero\nor more method bodies:\n protocol-or-interface-or-Object\n(methodName [args*] body)*\n Dynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces. \n The class will have the (by default, immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly. Fields can be qualified\nwith the metadata :volatile-mutable true or :unsynchronized-mutable\ntrue, at which point (set! afield aval) will be supported in method\nbodies. Note well that mutable fields are extremely difficult to use\ncorrectly, and are present only to facilitate the building of higher\nlevel constructs, such as Clojure's reference types, in Clojure\nitself. They are for experts only - if the semantics and\nimplications of :volatile-mutable or :unsynchronized-mutable are not\nimmediately apparent to you, you should not be using them.\n Method definitions take the form:\n (methodname [args*] body)\n The argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n Methods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n In the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n When AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n One constructor will be defined, taking the designated fields.  Note\nthat the field names __meta, __extmap, __hash and __hasheq are currently\nreserved and should not be used when defining your own types.\n Given (deftype TypeName ...), a factory function called ->TypeName\nwill be defined, taking positional parameters for the fields", "reify": "reify is a macro with the following structure:\n(reify options* specs*)\n\nCurrently there are no options.\n Each spec consists of the protocol or interface name followed by zero\nor more method bodies:\n protocol-or-interface-or-Object\n(methodName [args+] body)*\n Methods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that the first parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations.  Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n The return type can be indicated by a type hint on the method name,\nand arg types can be indicated by a type hint on arg names. If you\nleave out all hints, reify will try to match on same name/arity\nmethod in the protocol(s)/interface(s) - this is preferred. If you\nsupply any hints at all, no inference is done, so all hints (or\ndefault of Object) must be correct, for both arguments and return\ntype. If a method is overloaded in a protocol/interface, multiple\nindependent method definitions must be supplied.  If overloaded with\nsame arity in an interface you must specify complete hints to\ndisambiguate - a missing hint implies Object.\n recur works to method heads The method bodies of reify are lexical\nclosures, and can refer to the surrounding local scope:\n\n(str (let [f \"foo\"] \n     (reify Object \n       (toString [this] f))))\n== \"foo\"\n (seq (let [f \"foo\"] \n     (reify clojure.lang.Seqable \n       (seq [this] (seq f)))))\n== (\\f \\o \\o))\n\nreify always implements clojure.lang.IObj and transfers meta\ndata of the form to the created object.\n\n(meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n== {:k :v}", "extend": "Implementations of protocol methods can be provided using the extend construct:\n (extend AType\n  AProtocol\n   {:foo an-existing-fn\n    :bar (fn [a b] ...)\n    :baz (fn ([a]...) ([a b] ...)...)}\n  BProtocol \n    {...} \n  ...)\n  extend takes a type/class (or interface, see below), and one or more\nprotocol + method map pairs. It will extend the polymorphism of the\nprotocol's methods to call the supplied methods when an AType is\nprovided as the first argument. \n Method maps are maps of the keyword-ized method names to ordinary\nfns. This facilitates easy reuse of existing fns and fn maps, for\ncode reuse/mixins without derivation or composition. You can extend\nan interface to a protocol. This is primarily to facilitate interop\nwith the host (e.g. Java) but opens the door to incidental multiple\ninheritance of implementation since a class can inherit from more\nthan one interface, both of which extend the protocol. It is TBD how\nto specify which impl to use. You can extend a protocol on nil.\n If you are supplying the definitions explicitly (i.e. not reusing\nexsting functions or mixin maps), you may find it more convenient to\nuse the extend-type or extend-protocol macros.\n Note that multiple independent extend clauses can exist for the same\ntype, not all protocols need be defined in a single extend call.\n See also:\nextends?, satisfies?, extenders", "extend-protocol": "Useful when you want to provide several implementations of the same\nprotocol all at once. Takes a single protocol and the implementation\nof that protocol for one or more types. Expands into calls to\nextend-type:\n (extend-protocol Protocol\n  AType\n    (foo [x] ...)\n    (bar [x y] ...)\n  BType\n    (foo [x] ...)\n    (bar [x y] ...)\n  AClass\n    (foo [x] ...)\n    (bar [x y] ...)\n  nil\n    (foo [x] ...)\n    (bar [x y] ...))\n expands into:\n (do\n (clojure.core/extend-type AType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type BType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type AClass Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type nil Protocol \n   (foo [x] ...) \n   (bar [x y] ...)))", "extend-type": "A macro that expands into an extend call. Useful when you are\nsupplying the definitions explicitly inline, extend-type\nautomatically creates the maps required by extend.  Propagates the\nclass as a type hint on the first argument of all fns.\n (extend-type MyType \n  Countable\n    (cnt [c] ...)\n  Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...)))\n expands into:\n (extend MyType\n Countable\n   {:cnt (fn [c] ...)}\n Foo\n   {:baz (fn ([x] ...) ([x y & zs] ...))\n    :bar (fn [x y] ...)})", "extenders": "Returns a collection of the types explicitly extending protocol", "meta": "Returns the metadata of obj, returns nil if there is no metadata.", "with-meta": "Returns an object of the same type and value as obj, with\n  map m as its metadata.", "vary-meta": "Returns an object of the same type and value as obj, with\n(apply f (meta obj) args) as its metadata.", "reset-meta!": "Atomically resets the metadata for a namespace/var/ref/agent/atom", "alter-meta!": "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n (apply f its-current-meta args)\n f must be free of side-effects", "use": "Like 'require, but also refers to each lib's namespace using\nclojure.core/refer. Use :use in the ns macro in preference to calling\nthis directly.\n 'use accepts additional options in libspecs: :exclude, :only, :rename.\nThe arguments and semantics for :exclude, :only, and :rename are the same\nas those documented for clojure.core/refer.", "require": "Loads libs, skipping any that are already loaded. Each argument is\neither a libspec that identifies a lib, a prefix list that identifies\nmultiple libs whose names share a common prefix, or a flag that modifies\nhow all the identified libs are loaded. Use :require in the ns macro\nin preference to calling this directly.\n Libs\n A 'lib' is a named set of resources in classpath whose contents define a\nlibrary of Clojure code. Lib names are symbols and each lib is associated\nwith a Clojure namespace and a Java package that share its name. A lib's\nname also locates its root directory within classpath using Java's\npackage name to classpath-relative path mapping. All resources in a lib\nshould be contained in the directory structure under its root directory.\nAll definitions a lib makes should be in its associated namespace.\n 'require loads a lib by loading its root resource. The root resource path\nis derived from the lib name in the following manner:\nConsider a lib named by the symbol 'x.y.z; it has the root directory\n<classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj, or\n<classpath>/x/y/z.cljc if <classpath>/x/y/z.clj does not exist. The\nroot resource should contain code to create the lib's\nnamespace (usually by using the ns macro) and load any additional\nlib resources.\n Libspecs\n A libspec is a lib name or a vector containing a lib name followed by\noptions expressed as sequential keywords and arguments.\n Recognized options:\n:as takes a symbol as its argument and makes that symbol an alias to the\n  lib's namespace in the current namespace.\n:refer takes a list of symbols to refer from the namespace or the :all\n  keyword to bring in all public vars.\n Prefix Lists\n It's common for Clojure code to depend on several libs whose names have\nthe same prefix. When specifying libs, prefix lists can be used to reduce\nrepetition. A prefix list contains the shared prefix followed by libspecs\nwith the shared prefix removed from the lib names. After removing the\nprefix, the names that remain must not contain any periods.\n Flags\n A flag is a keyword.\nRecognized flags: :reload, :reload-all, :verbose\n:reload forces loading of all the identified libs even if they are\n  already loaded\n:reload-all implies :reload and also forces loading of all libs that the\n  identified libs directly or indirectly load via require or use\n:verbose triggers printing information about each load, alias, and refer\n Example:\n The following would load the libraries clojure.zip and clojure.set\nabbreviated as 's'.\n (require '(clojure zip [set :as s]))", "import": "import-list => (package-symbol class-name-symbols*)\n For each name in class-name-symbols, adds a mapping from name to the\nclass named by package.name to the current namespace. Use :import in the ns\nmacro in preference to calling this directly.", "refer-clojure": "Same as (refer 'clojure.core <filters>)", "refer": "refers to all public vars of ns, subject to filters.\nfilters can include at most one each of:\n :exclude list-of-symbols\n:only list-of-symbols\n:rename map-of-fromsymbol-tosymbol\n For each public interned var in the namespace named by the symbol,\nadds a mapping from the name of the var to the var to the current\nnamespace.  Throws an exception if name is already mapped to\nsomething else in the current namespace. Filters can be used to\nselect a subset, via inclusion or exclusion, or to provide a mapping\nto a symbol different from the var's name, in order to prevent\nclashes. Use :use in the ns macro in preference to calling this directly.", "*compile-files*": "Set to true when compiling files, false otherwise.", "*compile-path*": "Specifies the directory where 'compile' will write out .class\nfiles. This directory must be in the classpath for 'compile' to\nwork.\n Defaults to \"classes\"", "*file*": "The path of the file being evaluated, as a String.\n When there is no file, e.g. in the REPL, the value is not defined.", "*warn-on-reflection*": "When set to true, the compiler will emit warnings when reflection is\nneeded to resolve Java method calls or field accesses.\n Defaults to false.", "compile": "Compiles the namespace named by the symbol lib into a set of\nclassfiles. The source for the lib must be in a proper\nclasspath-relative directory. The output files will go into the\ndirectory specified by *compile-path*, and that directory too must\nbe in the classpath.", "load": "Loads Clojure code from resources in classpath. A path is interpreted as\nclasspath-relative if it begins with a slash or relative to the root\ndirectory for the current namespace otherwise.", "load-file": "Sequentially read and evaluate the set of forms contained in the file.", "load-reader": "Sequentially read and evaluate the set of forms contained in the\nstream/file", "load-string": "Sequentially read and evaluate the set of forms contained in the\nstring", "read": "Reads the next object from stream, which must be an instance of\njava.io.PushbackReader or some derivee.  stream defaults to the\ncurrent value of *in*.\n Opts is a persistent map with valid keys:\n  :read-cond - :allow to process reader conditionals, or\n               :preserve to keep all branches\n  :features - persistent set of feature keywords for reader conditionals\n  :eof - on eof, return value unless :eofthrow, then throw.\n         if not specified, will throw\n Note that read can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n For data structure interop use clojure.edn/read", "read-string": "Reads one object from the string s. Optionally include reader\noptions, as specified in read.\n Note that read-string can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n For data structure interop use clojure.edn/read-string", "gen-class": "When compiling, generates compiled bytecode for a class with the\ngiven package-qualified :name (which, as all names in these\nparameters, can be a string or symbol), and writes the .class file\nto the *compile-path* directory.  When not compiling, does\nnothing. The gen-class construct contains no implementation, as the\nimplementation will be dynamically sought by the generated class in\nfunctions in an implementing Clojure namespace. Given a generated\nclass org.mydomain.MyClass with a method named mymethod, gen-class\nwill generate an implementation that looks for a function named by \n(str prefix mymethod) (default prefix: \"-\") in a\nClojure namespace specified by :impl-ns\n(defaults to the current namespace). All inherited methods,\ngenerated methods, and init and main functions (see :methods, :init,\nand :main below) will be found similarly prefixed. By default, the\nstatic initializer for the generated class will attempt to load the\nClojure support code for the class as a resource from the classpath,\ne.g. in the example case, ``org/mydomain/MyClass__init.class``. This\nbehavior can be controlled by :load-impl-ns\n Note that methods with a maximum of 18 parameters are supported.\n In all subsequent sections taking types, the primitive types can be\nreferred to by their Java names (int, float etc), and classes in the\njava.lang package can be used without a package qualifier. All other\nclasses must be fully qualified.\n Options should be a set of key/value pairs, all except for :name are optional:\n :name aname\n The package-qualified name of the class to be generated\n :extends aclass\n Specifies the superclass, the non-private methods of which will be\noverridden by the class. If not provided, defaults to Object.\n :implements [interface ...]\n One or more interfaces, the methods of which will be implemented by the class.\n :init name\n If supplied, names a function that will be called with the arguments\nto the constructor. Must return [ [superclass-constructor-args] state] \nIf not supplied, the constructor args are passed directly to\nthe superclass constructor and the state will be nil\n :constructors {[param-types] [super-param-types], ...}\n By default, constructors are created for the generated class which\nmatch the signature(s) of the constructors for the superclass. This\nparameter may be used to explicitly specify constructors, each entry\nproviding a mapping from a constructor signature to a superclass\nconstructor signature. When you supply this, you must supply an :init\nspecifier. \n :post-init name\n If supplied, names a function that will be called with the object as\nthe first argument, followed by the arguments to the constructor.\nIt will be called every time an object of this class is created,\nimmediately after all the inherited constructors have completed.\nIts return value is ignored.\n :methods [ [name [param-types] return-type], ...]\n The generated class automatically defines all of the non-private\nmethods of its superclasses/interfaces. This parameter can be used\nto specify the signatures of additional methods of the generated\nclass. Static methods can be specified with ^{:static true} in the\nsignature's metadata. Do not repeat superclass/interface signatures\nhere.\n :main boolean\n If supplied and true, a static public main function will be generated. It will\npass each string of the String[] argument as a separate argument to\na function called (str prefix main).\n :factory name\n If supplied, a (set of) public static factory function(s) will be\ncreated with the given name, and the same signature(s) as the\nconstructor(s).\n\n:state name\n If supplied, a public final instance field with the given name will be\ncreated. You must supply an :init function in order to provide a\nvalue for the state. Note that, though final, the state can be a ref\nor agent, supporting the creation of Java objects with transactional\nor asynchronous mutation semantics.\n :exposes {protected-field-name {:get name :set name}, ...}\n Since the implementations of the methods of the generated class\noccur in Clojure functions, they have no access to the inherited\nprotected fields of the superclass. This parameter can be used to\ngenerate public getter/setter methods exposing the protected field(s)\nfor use in the implementation.\n :exposes-methods {super-method-name exposed-name, ...}\n It is sometimes necessary to call the superclass' implementation of an\noverridden method.  Those methods may be exposed and referred in \nthe new method implementation by a local name.\n :prefix string\n Default: \"-\" Methods called e.g. Foo will be looked up in vars called\nprefixFoo in the implementing ns.\n :impl-ns name\n Default: the name of the current ns. Implementations of methods will be \nlooked up in this namespace.\n :load-impl-ns boolean\n Default: true. Causes the static initializer for the generated class\nto reference the load code for the implementing namespace. Should be\ntrue when implementing-ns is the default, false if you intend to\nload the code via some other method.", "gen-interface": "When compiling, generates compiled bytecode for an interface with\nthe given package-qualified :name (which, as all names in these\nparameters, can be a string or symbol), and writes the .class file\nto the *compile-path* directory.  When not compiling, does nothing.\n  In all subsequent sections taking types, the primitive types can be\nreferred to by their Java names (int, float etc), and classes in the\njava.lang package can be used without a package qualifier. All other\nclasses must be fully qualified.\n  Options should be a set of key/value pairs, all except for :name are\noptional:\n :name aname\n The package-qualified name of the class to be generated\n :extends [interface ...]\n One or more interfaces, which will be extended by this interface.\n :methods [ [name [param-types] return-type], ...]\n This parameter is used to specify the signatures of the methods of\nthe generated interface.  Do not repeat superinterface signatures\nhere.", "loaded-libs": "Returns a sorted set of symbols naming the currently loaded libs", "test": "test [v] finds fn at key :test in var metadata and calls it,\npresuming failure will throw exception", "*in*": "A java.io.Reader object representing standard input for read operations.\n Defaults to System/in, wrapped in a LineNumberingPushbackReader", "*out*": "A java.io.Writer object representing standard output for print operations.\n Defaults to System/out, wrapped in an OutputStreamWriter", "*err*": "A java.io.Writer object representing standard error for print operations.\n Defaults to System/err, wrapped in a PrintWriter", "print": "Prints the object(s) to the output stream that is the current value\nof *out*.  print and println produce output for human consumption.", "printf": "Prints formatted output, as per format", "println": "Same as print followed by (newline)", "pr": "Prints the object(s) to the output stream that is the current value\nof *out*.  Prints the object(s), separated by spaces if there is\nmore than one.  By default, pr and prn print in a way that objects\ncan be read by the reader", "prn": "Same as pr followed by (newline). Observes *flush-on-newline*", "newline": "Writes a platform-specific newline to *out*", "flush": "Flushes the output stream that is the current value of\n*out*", "read-line": "Reads the next line from stream that is the current value of *in* .", "slurp": "Opens a reader on f and reads all its contents, returning a string.\nSee clojure.java.io/reader for a complete list of supported arguments.", "spit": "Opposite of slurp.  Opens f with writer, writes content, then\ncloses f. Options passed to clojure.java.io/writer.", "with-in-str": "Evaluates body in a context in which *in* is bound to a fresh\nStringReader initialized with the string s.", "with-open": "bindings => [name init ...]\n Evaluates body in a try expression with names bound to the values\nof the inits, and a finally clause that calls (.close name) on each\nname in reverse order.", "*1": "bound in a repl thread to the most recent value printed", "*2": "bound in a repl thread to the second most recent value printed", "*3": "bound in a repl thread to the third most recent value printed", "*e": "bound in a repl thread to the most recent exception caught by the repl", "*print-dup*": "When set to logical true, objects will be printed in a way that preserves\ntheir type when read in later.\n Defaults to false.", "*print-length*": "*print-length* controls how many items of each collection the\nprinter will print. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nnumber of items of each collection to print. If a collection contains\nmore items, the printer will print items up to the limit followed by\n'...' to represent the remaining items. The root binding is nil\nindicating no limit.", "*print-level*": "*print-level* controls how many levels deep the printer will\nprint nested objects. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nlevel to print. Each argument to print is at level 0; if an argument is a\ncollection, its items are at level 1; and so on. If an object is a\ncollection and is at a level greater than or equal to the value bound to\n*print-level*, the printer prints '#' to represent it. The root binding\nis nil indicating no limit.", "*print-meta*": "If set to logical true, when printing an object, its metadata will also\nbe printed in a form that can be read back by the reader.\n Defaults to false.", "*print-readably*": "When set to logical false, strings and characters will be printed with\nnon-alphanumeric characters converted to the appropriate escape sequences.\n Defaults to true", "*clojure-version*": "The version info for Clojure core, as a map containing :major :minor \n:incremental and :qualifier keys. Feature releases may increment \n:minor and/or :major, bugfix releases will increment :incremental. \nPossible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\"", "clojure-version": "Returns clojure version as a printable string.", "*command-line-args*": "A sequence of the supplied command line arguments, or nil if\nnone were supplied", "time": "Evaluates expr and prints the time it took.  Returns the value of\n expr."}